package otg

import (
"fmt"
"os/exec"
"testing"
"time"

"github.com/tealeg/xlsx"
)

func TestConnectToRouter14(t *testing.T) {
const (
sourceIP = "10.133.35.158"
destinationIP = "10.133.35.143"
udpDuration    = 10 * time.Second
tcpDuration    = 20 * time.Second
)

// Create a new Excel file
file := xlsx.NewFile()
sheet, err := file.AddSheet("Nping Output")
if err != nil {
t.Fatalf("Error creating Excel sheet: %v", err)
}

testResult := "Pass" // Assume test passes initially

// Execute UDP nping command
udpCommand := fmt.Sprintf("sudo nping --udp -c 10 --rate 10 %s %s", sourceIP, destinationIP)
udpOutput, err := executeNpingCommand(udpCommand, t)
if err != nil {
testResult = "Fail" // Mark as fail if there's an error
t.Fatalf("Error executing UDP nping command: %v", err)
}

// Log UDP output to Excel sheet
logOutputToSheet("UDP Test Output", udpOutput, sheet)

// Wait for UDP duration
time.Sleep(udpDuration)

// Execute TCP nping command
tcpCommand := fmt.Sprintf("sudo nping --tcp -c 10 --rate 10 %s %s", sourceIP, destinationIP)
tcpOutput, err := executeNpingCommand(tcpCommand, t)
if err != nil {
testResult = "Fail" // Mark as fail if there's an error
t.Fatalf("Error executing TCP nping command: %v", err)
}

// Log TCP output to Excel sheet
logOutputToSheet("TCP Test Output", tcpOutput, sheet)

// Log test result to Excel sheet
logTestResultToSheet(testResult, sheet)

// Save Excel file after TCP test
tcpFilePath := "/home/tcs/sample/ondatra/otg/nping_output_tcpudp.xlsx"
err = file.Save(tcpFilePath)
if err != nil {
t.Fatalf("Error saving TCP Excel file: %v", err)
}

t.Log("nping traffic generation completed for UDP and TCP. Test Result:", testResult)
}

// executeNpingCommand executes the given nping command and returns the combined output.
func executeNpingCommand(command string, t *testing.T) (string, error) {
cmd := exec.Command("sh", "-c", command)
output, err := cmd.CombinedOutput()
if err != nil {
return "", fmt.Errorf("error starting nping command: %v. Output: %s", err, output)
}
t.Logf("Nping output: %s", string(output))
return string(output), nil
}

// logOutputToSheet logs the given output to the Excel sheet.
func logOutputToSheet(title string, output string, sheet *xlsx.Sheet) {
row := sheet.AddRow()
cell := row.AddCell()
cell.Value = title
row = sheet.AddRow()
cell = row.AddCell()
cell.Value = output
}

// logTestResultToSheet logs the test result to the Excel sheet.
func logTestResultToSheet(result string, sheet *xlsx.Sheet) {
row := sheet.AddRow()
cell := row.AddCell()
cell.Value = "Test Result"
row = sheet.AddRow()
cell = row.AddCell()
cell.Value = result
}
