package otg
 
import (
"fmt"
"os/exec"
"testing"
"time"
 
"github.com/tealeg/xlsx"
)
 
func TestConnectToRouter13(t *testing.T) {
const (
sourceIP = "10.133.35.158"
destinationIP = "10.133.35.143"
duration      = 10 * time.Second
)
 
// Create a new Excel file
file := xlsx.NewFile()
sheet, err := file.AddSheet("Nping Output")
if err != nil {
t.Fatalf("Error creating Excel sheet: %v", err)
}
 
// Construct nping command
command := fmt.Sprintf("sudo nping --udp -c 10 --rate 10 %s %s", sourceIP, destinationIP)
 
// Execute nping command
cmd := exec.Command("sh", "-c", command)
 
output, err := cmd.CombinedOutput()
if err != nil {
t.Fatalf("Error starting nping command: %v. Output: %s", err, output)
}

t.Logf("nping output: %s", string(output))
 
// Log output to Excel sheet
row := sheet.AddRow()
cell := row.AddCell()
cell.Value = "Nping Output"
row = sheet.AddRow()
cell = row.AddCell()
cell.Value = string(output)

// Save Excel file to a specific directory
filePath := "/home/tcs/sample/ondatra/otg/nping_output.xlsx"
err = file.Save(filePath)
if err != nil {
    t.Fatalf("Error saving Excel file: %v", err)
}
 
// Wait for the specified duration
time.Sleep(duration)
 
// Check if the process has already finished
if cmd.ProcessState != nil && cmd.ProcessState.Exited() {
t.Log("nping process has already finished.")
return
}
 
// Stop nping command
err = cmd.Process.Kill()
if err != nil {
t.Fatalf("Error stopping nping command: %v", err)
}
 
t.Log("nping traffic generation completed.")
 
// Save Excel file
err = file.Save("nping_output.xlsx")
if err != nil {
t.Fatalf("Error saving Excel file: %v", err)
}
}
